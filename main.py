from fastapi import FastAPI, File, UploadFile, Form, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Optional
import os
import uuid
import shutil
from pathlib import Path
import asyncio
from video_processor import VideoProcessor
import httpx
import json
import threading


app = FastAPI(title="VideoBot App", description="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
UPLOAD_DIR = Path("uploads")
RESULT_DIR = Path("results")
TEMP_DIR = Path("temp_downloads")
UPLOAD_DIR.mkdir(exist_ok=True)
RESULT_DIR.mkdir(exist_ok=True)
TEMP_DIR.mkdir(exist_ok=True)

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def cleanup_temp_files():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    temp_dirs = [TEMP_DIR, Path("temp_processing")]
    
    for temp_dir in temp_dirs:
        try:
            if temp_dir.exists():
                for temp_file in temp_dir.iterdir():
                    if temp_file.is_file():
                        temp_file.unlink()
                        print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ {temp_dir}: {e}")

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanup_temp_files()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è Railway)
def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    print("‚ÑπÔ∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Railway")
    # try:
    #     from telegram_bot_standalone import main as bot_main
    #     
    #     print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
    #     
    #     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    #     bot_main()
    #     
    # except Exception as e:
    #     print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

# –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–∞ Railway
print("‚ÑπÔ∏è Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å")

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å–µ—Å—Å–∏—è–º
USER_SESSIONS_FILE = Path("user_sessions.json")

def load_user_sessions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Å—Å–∏—è–º–∏"""
    if USER_SESSIONS_FILE.exists():
        try:
            with open(USER_SESSIONS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return {}

def save_user_sessions(sessions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Å—Å–∏—è–º–∏"""
    try:
        with open(USER_SESSIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(sessions, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def link_user_to_session(user_id: str, session_id: str):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ—Å—Å–∏–∏"""
    sessions = load_user_sessions()
    sessions[session_id] = user_id
    save_user_sessions(sessions)
    print(f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–µ—Å—Å–∏–∏ {session_id}")

def get_user_for_session(session_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    sessions = load_user_sessions()
    return sessions.get(session_id, None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
async def send_telegram_notification(message: str, chat_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        from config import TELEGRAM_BOT_TOKEN
        
        if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return
        
        # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ .env)
        if not chat_id:
            chat_id = os.getenv("TELEGRAM_CHAT_ID")
            if not chat_id:
                print("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=data, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {chat_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ Telegram
async def send_video_files_to_telegram(result_files, session_id, copies, add_frames, compression):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram"""
    try:
        telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        
        if not telegram_token or telegram_token == "YOUR_BOT_TOKEN_HERE":
            print("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ñ–∞–π–ª—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏
        user_id = get_user_for_session(session_id)
        if not user_id:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∞–π–ª—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        start_message = f"""
üé¨ <b>–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!</b>

üìÅ <b>–°–µ—Å—Å–∏—è:</b> {session_id}
üìä <b>–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {len(result_files)}
‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
  ‚Ä¢ –ö–æ–ø–∏–π: {copies}
  ‚Ä¢ –†–∞–º–∫–∏: {'–î–∞' if add_frames else '–ù–µ—Ç'}
  ‚Ä¢ –°–∂–∞—Ç–∏–µ: {'–î–∞' if compression else '–ù–µ—Ç'}

üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã...</b>
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_telegram_notification(start_message, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        for i, file_path in enumerate(result_files, 1):
            try:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {i}: {file_path}")
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                with open(file_path, 'rb') as video_file:
                    video_data = video_file.read()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Telegram Bot API
                url = f"https://api.telegram.org/bot{telegram_token}/sendVideo"
                
                files = {
                    'video': (file_path.name, video_data, 'video/mp4')
                }
                
                data = {
                    'chat_id': user_id,
                    'caption': f"üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ #{i}\n"
                              f"–ö–æ–ø–∏–π: {copies}\n"
                              f"–†–∞–º–∫–∏: {'–î–∞' if add_frames else '–ù–µ—Ç'}\n"
                              f"–°–∂–∞—Ç–∏–µ: {'–î–∞' if compression else '–ù–µ—Ç'}"
                }
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(url, files=files, data=data, timeout=300)
                    
                    if response.status_code == 200:
                        print(f"‚úÖ –§–∞–π–ª {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {i}: {response.status_code}")
                        print(f"–û—Ç–≤–µ—Ç: {response.text}")
                        
            except Exception as file_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {i}: {file_error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        completion_message = f"‚úÖ <b>–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\nüìÅ –°–µ—Å—Å–∏—è: {session_id}\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(result_files)} —Ñ–∞–π–ª–æ–≤"
        await send_telegram_notification(completion_message, user_id)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ Telegram: {e}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if Path("static").exists():
    app.mount("/static", StaticFiles(directory="static"), name="static")

class VideoSettings(BaseModel):
    copies: int = 1
    compression: bool = False
    add_frames: bool = False

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    with open("templates/index.html", "r", encoding="utf-8") as f:
        content = f.read()
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        return HTMLResponse(
            content=content,
            headers={
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )

@app.post("/link-user")
async def link_user(user_id: str = Form(...)):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    session_id = str(uuid.uuid4())
    link_user_to_session(user_id, session_id)
    
    return {
        "session_id": session_id,
        "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–µ—Å—Å–∏–∏ {session_id}"
    }

@app.post("/test-params")
async def test_params(
    compression: str = Form("false"),
    add_frames: str = Form("false")
):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print(f"üîç –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–ª—É—á–µ–Ω–æ:")
    print(f"  compression: '{compression}' (—Ç–∏–ø: {type(compression)})")
    print(f"  add_frames: '{add_frames}' (—Ç–∏–ø: {type(add_frames)})")
    
    compression_bool = compression.lower() in ['true', '1', 'yes', 'on']
    add_frames_bool = add_frames.lower() in ['true', '1', 'yes', 'on']
    
    print(f"üîç –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"  compression: {compression_bool}")
    print(f"  add_frames: {add_frames_bool}")
    
    return {
        "received": {
            "compression": compression,
            "add_frames": add_frames
        },
        "parsed": {
            "compression": compression_bool,
            "add_frames": add_frames_bool
        }
    }

@app.post("/upload")
async def upload_video(
    file: UploadFile = File(...),
    user_id: str = Form(...),
    copies: int = Form(1),
    compression: str = Form("false"),
    add_frames: str = Form("false")
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if not file.content_type or not file.content_type.startswith('video/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (50MB)
    file_size = 0
    content = await file.read()
    file_size = len(content)
    
    if file_size > 50 * 1024 * 1024:  # 50MB –≤ –±–∞–π—Ç–∞—Ö
        raise HTTPException(status_code=400, detail="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50MB")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
    if copies < 1 or copies > 3:
        raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ boolean
    compression_bool = compression.lower() in ['true', '1', 'yes', 'on']
    add_frames_bool = add_frames.lower() in ['true', '1', 'yes', 'on']
    
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: copies={copies}, compression='{compression}' -> {compression_bool}, add_frames='{add_frames}' -> {add_frames_bool}")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
    session_id = str(uuid.uuid4())
    session_dir = UPLOAD_DIR / session_id
    session_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ—Å—Å–∏–∏
    link_user_to_session(user_id, session_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    original_path = session_dir / f"original_{file.filename}"
    with open(original_path, "wb") as buffer:
        buffer.write(content)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_session_dir = RESULT_DIR / session_id
    result_session_dir.mkdir(exist_ok=True)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        processor = VideoProcessor()
        result_files = await processor.process_video(
            input_path=original_path,
            output_dir=result_session_dir,
            copies=copies,
            compression=compression_bool,
            add_frames=add_frames_bool
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            original_path.unlink()
            print(f"–£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {original_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {original_path}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
        try:
            if session_dir.exists() and not any(session_dir.iterdir()):
                session_dir.rmdir()
                print(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {session_dir}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ {session_dir}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        asyncio.create_task(send_video_files_to_telegram(result_files, session_id, copies, add_frames_bool, compression_bool))
        
        return {
            "session_id": session_id,
            "message": f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –°–æ–∑–¥–∞–Ω–æ {len(result_files)} —Ñ–∞–π–ª–æ–≤.",
            "files": [f"/download/{session_id}/{file.name}" for file in result_files]
        }
        
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        shutil.rmtree(session_dir, ignore_errors=True)
        shutil.rmtree(result_session_dir, ignore_errors=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ!</b>

üìÅ <b>–°–µ—Å—Å–∏—è:</b> {session_id}
üö® <b>–û—à–∏–±–∫–∞:</b> {str(e)}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
        asyncio.create_task(send_telegram_notification(error_message))
        
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")

@app.get("/download/{session_id}/{filename}")
async def download_file(session_id: str, filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    file_path = RESULT_DIR / session_id / filename
    
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –Ω–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
    temp_dir = Path("temp_downloads")
    temp_dir.mkdir(exist_ok=True)
    
    temp_filename = f"temp_{session_id}_{filename}"
    temp_path = temp_dir / temp_filename
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    shutil.copy2(file_path, temp_path)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    try:
        file_path.unlink()
        print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã –≤ —Å–µ—Å—Å–∏–∏
    session_dir = RESULT_DIR / session_id
    if session_dir.exists():
        remaining_files = list(session_dir.iterdir())
        if not remaining_files:
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
            try:
                session_dir.rmdir()
                print(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏: {session_dir}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {session_dir}: {e}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    def cleanup_temp_file():
        try:
            os.unlink(temp_path)
            print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_path}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º BackgroundTasks –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
    background_tasks = BackgroundTasks()
    background_tasks.add_task(cleanup_temp_file)
    
    return FileResponse(
        path=temp_path,
        filename=filename,
        media_type='application/octet-stream',
        background=background_tasks
    )

@app.delete("/cleanup/{session_id}")
async def cleanup_session(session_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏"""
    upload_path = UPLOAD_DIR / session_id
    result_path = RESULT_DIR / session_id
    
    if upload_path.exists():
        shutil.rmtree(upload_path)
    if result_path.exists():
        shutil.rmtree(result_path)
    
    return {"message": "–§–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã"}

@app.post("/cleanup-temp")
async def cleanup_temp():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    cleanup_temp_files()
    return {"message": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"}

if __name__ == "__main__":
    import uvicorn
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –¥–µ–ø–ª–æ—è)
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)

