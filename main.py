from fastapi import FastAPI, File, UploadFile, Form, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Optional
import os
import uuid
import shutil
from pathlib import Path
import asyncio
from video_processor import VideoProcessor

app = FastAPI(title="VideoBot App", description="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
UPLOAD_DIR = Path("uploads")
RESULT_DIR = Path("results")
TEMP_DIR = Path("temp_downloads")
UPLOAD_DIR.mkdir(exist_ok=True)
RESULT_DIR.mkdir(exist_ok=True)
TEMP_DIR.mkdir(exist_ok=True)

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def cleanup_temp_files():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    temp_dirs = [TEMP_DIR, Path("temp_processing")]
    
    for temp_dir in temp_dirs:
        try:
            if temp_dir.exists():
                for temp_file in temp_dir.iterdir():
                    if temp_file.is_file():
                        temp_file.unlink()
                        print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ {temp_dir}: {e}")

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanup_temp_files()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if Path("static").exists():
    app.mount("/static", StaticFiles(directory="static"), name="static")

class VideoSettings(BaseModel):
    copies: int = 1
    compression: bool = False
    add_frames: bool = False

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    with open("templates/index.html", "r", encoding="utf-8") as f:
        content = f.read()
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        return HTMLResponse(
            content=content,
            headers={
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )

@app.post("/test-params")
async def test_params(
    compression: str = Form("false"),
    add_frames: str = Form("false")
):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print(f"üîç –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–ª—É—á–µ–Ω–æ:")
    print(f"  compression: '{compression}' (—Ç–∏–ø: {type(compression)})")
    print(f"  add_frames: '{add_frames}' (—Ç–∏–ø: {type(add_frames)})")
    
    compression_bool = compression.lower() in ['true', '1', 'yes', 'on']
    add_frames_bool = add_frames.lower() in ['true', '1', 'yes', 'on']
    
    print(f"üîç –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"  compression: {compression_bool}")
    print(f"  add_frames: {add_frames_bool}")
    
    return {
        "received": {
            "compression": compression,
            "add_frames": add_frames
        },
        "parsed": {
            "compression": compression_bool,
            "add_frames": add_frames_bool
        }
    }

@app.post("/upload")
async def upload_video(
    file: UploadFile = File(...),
    copies: int = Form(1),
    compression: str = Form("false"),
    add_frames: str = Form("false")
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if not file.content_type or not file.content_type.startswith('video/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (50MB)
    file_size = 0
    content = await file.read()
    file_size = len(content)
    
    if file_size > 50 * 1024 * 1024:  # 50MB –≤ –±–∞–π—Ç–∞—Ö
        raise HTTPException(status_code=400, detail="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50MB")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
    if copies < 1 or copies > 3:
        raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ boolean
    compression_bool = compression.lower() in ['true', '1', 'yes', 'on']
    add_frames_bool = add_frames.lower() in ['true', '1', 'yes', 'on']
    
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: copies={copies}, compression='{compression}' -> {compression_bool}, add_frames='{add_frames}' -> {add_frames_bool}")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
    session_id = str(uuid.uuid4())
    session_dir = UPLOAD_DIR / session_id
    session_dir.mkdir(exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    original_path = session_dir / f"original_{file.filename}"
    with open(original_path, "wb") as buffer:
        buffer.write(content)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_session_dir = RESULT_DIR / session_id
    result_session_dir.mkdir(exist_ok=True)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        processor = VideoProcessor()
        result_files = await processor.process_video(
            input_path=original_path,
            output_dir=result_session_dir,
            copies=copies,
            compression=compression_bool,
            add_frames=add_frames_bool
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            original_path.unlink()
            print(f"–£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {original_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {original_path}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
        try:
            if session_dir.exists() and not any(session_dir.iterdir()):
                session_dir.rmdir()
                print(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {session_dir}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ {session_dir}: {e}")
        
        return {
            "session_id": session_id,
            "message": f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –°–æ–∑–¥–∞–Ω–æ {len(result_files)} —Ñ–∞–π–ª–æ–≤.",
            "files": [f"/download/{session_id}/{file.name}" for file in result_files]
        }
        
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        shutil.rmtree(session_dir, ignore_errors=True)
        shutil.rmtree(result_session_dir, ignore_errors=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")

@app.get("/download/{session_id}/{filename}")
async def download_file(session_id: str, filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    file_path = RESULT_DIR / session_id / filename
    
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –Ω–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
    temp_dir = Path("temp_downloads")
    temp_dir.mkdir(exist_ok=True)
    
    temp_filename = f"temp_{session_id}_{filename}"
    temp_path = temp_dir / temp_filename
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    shutil.copy2(file_path, temp_path)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    try:
        file_path.unlink()
        print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã –≤ —Å–µ—Å—Å–∏–∏
    session_dir = RESULT_DIR / session_id
    if session_dir.exists():
        remaining_files = list(session_dir.iterdir())
        if not remaining_files:
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
            try:
                session_dir.rmdir()
                print(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏: {session_dir}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {session_dir}: {e}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    def cleanup_temp_file():
        try:
            os.unlink(temp_path)
            print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_path}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º BackgroundTasks –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
    background_tasks = BackgroundTasks()
    background_tasks.add_task(cleanup_temp_file)
    
    return FileResponse(
        path=temp_path,
        filename=filename,
        media_type='application/octet-stream',
        background=background_tasks
    )

@app.delete("/cleanup/{session_id}")
async def cleanup_session(session_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏"""
    upload_path = UPLOAD_DIR / session_id
    result_path = RESULT_DIR / session_id
    
    if upload_path.exists():
        shutil.rmtree(upload_path)
    if result_path.exists():
        shutil.rmtree(result_path)
    
    return {"message": "–§–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã"}

@app.post("/cleanup-temp")
async def cleanup_temp():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    cleanup_temp_files()
    return {"message": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"}

if __name__ == "__main__":
    import uvicorn
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –¥–µ–ø–ª–æ—è)
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)

