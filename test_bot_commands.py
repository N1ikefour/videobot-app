#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import asyncio
from telegram import Update, User, Chat
from telegram.ext import ContextTypes
from telegram_bot import VideoBot

class MockUser:
    def __init__(self, user_id, username=None):
        self.id = user_id
        self.username = username

class MockMessage:
    def __init__(self, user_id, username=None):
        self.effective_user = MockUser(user_id, username)
        self.text = ""

class MockUpdate:
    def __init__(self, user_id, username=None):
        self.effective_user = MockUser(user_id, username)
        self.message = MockMessage(user_id, username)

class MockContext:
    def __init__(self):
        pass

async def test_bot_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = VideoBot()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [
        (123456789, "testuser1"),
        (987654321, "testuser2"),
        (555666777, None)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username
    ]
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start:")
    for user_id, username in test_users:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or '–ë–µ–∑ username'} (ID: {user_id})")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        update = MockUpdate(user_id, username)
        context = MockContext()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É start
            await bot.start(update, context)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /myid:")
    for user_id, username in test_users:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or '–ë–µ–∑ username'} (ID: {user_id})")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        update = MockUpdate(user_id, username)
        context = MockContext()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É myid
            await bot.myid(update, context)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /myid –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /myid: {e}")
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /help:")
    try:
        update = MockUpdate(123456789, "testuser")
        context = MockContext()
        await bot.help(update, context)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    asyncio.run(test_bot_commands())
