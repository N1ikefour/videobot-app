#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è Railway
"""

import os
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from video_processor import VideoProcessor
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {'‚úÖ' if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE' else '‚ùå'}")
if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE':
    print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:]}")
else:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway")

class VideoBot:
    def __init__(self):
        self.processor = None
        self.processing_users = set()
    
    def _get_processor(self):
        if self.processor is None:
            self.processor = VideoProcessor()
        return self.processor
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = str(update.effective_user.id)
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        print(f"üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        
        welcome_text = f"""
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot, {username}!

–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –≤–∏–¥–µ–æ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ 3 –∫–æ–ø–∏–π
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏
‚Ä¢ –°–∂–∏–º–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞

üì± **–í–∞—à User ID –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å User ID –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID: {user_id}", callback_data=f"copy_id_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instruction_text = f"""
üîó **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**

1. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID** (–∫–Ω–æ–ø–∫–∞ –≤—ã—à–µ)
2. **–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –ø–æ —Å—Å—ã–ª–∫–µ
3. **–í—Å—Ç–∞–≤—å—Ç–µ ID** –≤ –ø–æ–ª–µ "Telegram User ID"
4. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ** –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
5. **–ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã** –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç!

üí° **–í–∞—à ID:** `{user_id}`

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/myid - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID
        """
        
        await update.message.reply_text(instruction_text)
    
    async def myid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myid"""
        user_id = str(update.effective_user.id)
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**

üÜî **User ID:** `{user_id}`
üë§ **–ò–º—è:** {username}
üì± **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üí° **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID** –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å User ID –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID: {user_id}", callback_data=f"copy_id_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VideoBot:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV, WMV, FLV)
2. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
‚Ä¢ –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        await update.message.reply_text(help_text)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("copy_id_"):
            user_id = query.data.replace("copy_id_", "")
            await query.edit_message_text(
                f"‚úÖ **ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!**\n\n"
                f"üÜî –í–∞—à User ID: `{user_id}`\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!",
                parse_mode='Markdown'
            )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Railway' if os.getenv('RAILWAY_ENVIRONMENT') else 'Local'}")
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard")
        return
    
    try:
        bot = VideoBot()
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("help", bot.help))
        application.add_handler(CommandHandler("myid", bot.myid))
        application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video))
        application.add_handler(CallbackQueryHandler(bot.button_callback))
        
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print("üîç –õ–æ–≥–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        await application.updater.start_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await application.updater.idle()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
