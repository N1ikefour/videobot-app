import asyncio
import os
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from video_processor import VideoProcessor
import shutil
from config import TELEGRAM_BOT_TOKEN

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = TELEGRAM_BOT_TOKEN

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {'‚úÖ' if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE' else '‚ùå'}")
if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE':
    print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:]}")
else:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")

class VideoBot:
    def __init__(self):
        self.processor = None  # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
        self.processing_users = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤–∏–¥–µ–æ
    
    def _get_processor(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ, —Å–æ–∑–¥–∞–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self.processor is None:
            self.processor = VideoProcessor()
        return self.processor
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = str(update.effective_user.id)
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        print(f"üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        
        welcome_text = f"""
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot, {username}!

–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –≤–∏–¥–µ–æ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ 3 –∫–æ–ø–∏–π
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏
‚Ä¢ –°–∂–∏–º–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞

üì± **–í–∞—à User ID –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å User ID –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID: {user_id}", callback_data=f"copy_id_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instruction_text = f"""
üîó **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**

1. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID** (–∫–Ω–æ–ø–∫–∞ –≤—ã—à–µ)
2. **–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –ø–æ —Å—Å—ã–ª–∫–µ
3. **–í—Å—Ç–∞–≤—å—Ç–µ ID** –≤ –ø–æ–ª–µ "Telegram User ID"
4. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ** –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
5. **–ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã** –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç!

üí° **–í–∞—à ID:** `{user_id}`

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/myid - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID
        """
        
        await update.message.reply_text(instruction_text)
    
    async def myid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myid"""
        user_id = str(update.effective_user.id)
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**

üÜî **User ID:** `{user_id}`
üë§ **–ò–º—è:** {username}
üì± **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üí° **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID** –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å User ID –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID: {user_id}", callback_data=f"copy_id_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VideoBot:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV, WMV, FLV)
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:
   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (1-3)
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏ (–¥–∞/–Ω–µ—Ç)
   ‚Ä¢ –°–∂–∞—Ç—å –≤–∏–¥–µ–æ (–¥–∞/–Ω–µ—Ç)
3. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
‚Ä¢ –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        await update.message.reply_text(help_text)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("copy_id_"):
            user_id = query.data.replace("copy_id_", "")
            await query.edit_message_text(
                f"‚úÖ **ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!**\n\n"
                f"üÜî –í–∞—à User ID: `{user_id}`\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!",
                parse_mode='Markdown'
            )
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        
        print(f"üìπ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–æ
        if user_id in self.processing_users:
            print(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ")
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        video = update.message.video
        print(f"üìπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ: —Ä–∞–∑–º–µ—Ä={video.file_size}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={video.duration}")
        
        if video.file_size > 50 * 1024 * 1024:  # 50MB
            print(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {video.file_size} –±–∞–π—Ç")
            await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB!")
            return
        
        self.processing_users.add(user_id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            file = await context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            temp_dir = Path(f"temp_{user_id}")
            temp_dir.mkdir(exist_ok=True)
            
            input_path = temp_dir / f"input_{video.file_id}.mp4"
            await file.download_to_drive(input_path)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            keyboard = [
                [InlineKeyboardButton("üìä –ö–æ–ø–∏–∏: 1", callback_data="copies_1")],
                [InlineKeyboardButton("üìä –ö–æ–ø–∏–∏: 2", callback_data="copies_2")],
                [InlineKeyboardButton("üìä –ö–æ–ø–∏–∏: 3", callback_data="copies_3")],
                [InlineKeyboardButton("üñºÔ∏è –†–∞–º–∫–∏: –í–ö–õ", callback_data="frames_on")],
                [InlineKeyboardButton("üñºÔ∏è –†–∞–º–∫–∏: –í–´–ö–õ", callback_data="frames_off")],
                [InlineKeyboardButton("üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–ö–õ", callback_data="compression_on")],
                [InlineKeyboardButton("üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–´–ö–õ", callback_data="compression_off")],
                [InlineKeyboardButton("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"process_{video.file_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_msg.edit_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['video_path'] = str(input_path)
            context.user_data['temp_dir'] = str(temp_dir)
            context.user_data['copies'] = 1
            context.user_data['add_frames'] = False
            context.user_data['compression'] = False
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            print(f"  üìÅ –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ: {input_path}")
            print(f"  üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
            print(f"  ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∫–æ–ø–∏–∏=1, —Ä–∞–º–∫–∏=False, —Å–∂–∞—Ç–∏–µ=False")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            self.processing_users.discard(user_id)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        if data.startswith("copies_"):
            copies = int(data.split("_")[1])
            context.user_data['copies'] = copies
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = self._create_keyboard(context.user_data)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
        elif data.startswith("frames_"):
            add_frames = data.endswith("_on")
            context.user_data['add_frames'] = add_frames
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = self._create_keyboard(context.user_data)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
        elif data.startswith("compression_"):
            compression = data.endswith("_on")
            context.user_data['compression'] = compression
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = self._create_keyboard(context.user_data)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
        elif data.startswith("process_"):
            await self._process_video(query, context)
    
    def _create_keyboard(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        copies = user_data.get('copies', 1)
        add_frames = user_data.get('add_frames', False)
        compression = user_data.get('compression', False)
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
        copies_buttons = []
        for i in range(1, 4):
            text = f"üìä –ö–æ–ø–∏–∏: {i}"
            if i == copies:
                text += " ‚úÖ"
            copies_buttons.append(InlineKeyboardButton(text, callback_data=f"copies_{i}"))
        keyboard.append(copies_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–º–æ–∫
        frames_text = "üñºÔ∏è –†–∞–º–∫–∏: –í–ö–õ" if add_frames else "üñºÔ∏è –†–∞–º–∫–∏: –í–´–ö–õ"
        if add_frames:
            frames_text += " ‚úÖ"
        keyboard.append([InlineKeyboardButton(frames_text, callback_data="frames_on" if not add_frames else "frames_off")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è
        compression_text = "üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–ö–õ" if compression else "üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–´–ö–õ"
        if compression:
            compression_text += " ‚úÖ"
        keyboard.append([InlineKeyboardButton(compression_text, callback_data="compression_on" if not compression else "compression_off")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        keyboard.append([InlineKeyboardButton("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="process_go")])
        
        return keyboard
    
    async def _process_video(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        user_id = query.from_user.id
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            await query.edit_message_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
            
            video_path = Path(context.user_data['video_path'])
            temp_dir = Path(context.user_data['temp_dir'])
            copies = context.user_data['copies']
            add_frames = context.user_data['add_frames']
            compression = context.user_data['compression']
            
            print(f"üìÅ –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ: {video_path}")
            print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
            print(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–ø–∏–∏={copies}, —Ä–∞–º–∫–∏={add_frames}, —Å–∂–∞—Ç–∏–µ={compression}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_dir = temp_dir / "results"
            result_dir.mkdir(exist_ok=True)
            print(f"üìÅ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result_dir}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
            processor = self._get_processor()
            result_files = await processor.process_video(
                input_path=video_path,
                output_dir=result_dir,
                copies=copies,
                compression=compression,
                add_frames=add_frames
            )
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–æ {len(result_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(result_files)} —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            for i, file_path in enumerate(result_files):
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {i+1}: {file_path}")
                try:
                    with open(file_path, 'rb') as video_file:
                        await query.message.reply_video(
                            video=video_file,
                            caption=f"üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ #{i+1}\n"
                                   f"–ö–æ–ø–∏–π: {copies}\n"
                                   f"–†–∞–º–∫–∏: {'–î–∞' if add_frames else '–ù–µ—Ç'}\n"
                                   f"–°–∂–∞—Ç–∏–µ: {'–î–∞' if compression else '–ù–µ—Ç'}"
                        )
                    print(f"‚úÖ –§–∞–π–ª {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as send_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {i+1}: {send_error}")
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ #{i+1}: {str(send_error)}")
            
            await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                shutil.rmtree(temp_dir, ignore_errors=True)
            except:
                pass
            
            self.processing_users.discard(user_id)

async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Railway' if os.getenv('RAILWAY_ENVIRONMENT') else 'Local'}")
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print("üîß –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Railway Dashboard")
        return
    
    try:
        bot = VideoBot()
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("help", bot.help))
        application.add_handler(CommandHandler("myid", bot.myid))
        application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video))
        application.add_handler(CallbackQueryHandler(bot.button_callback))
        
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print("üîç –õ–æ–≥–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            allowed_updates=["message", "callback_query"]  # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

def main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    import asyncio
    asyncio.run(main_async())

if __name__ == "__main__":
    main()
