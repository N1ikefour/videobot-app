import asyncio
import os
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from video_processor import VideoProcessor
import tempfile
import shutil
from config import TELEGRAM_BOT_TOKEN

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = TELEGRAM_BOT_TOKEN

class VideoBot:
    def __init__(self):
        self.processor = VideoProcessor()
        self.processing_users = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤–∏–¥–µ–æ
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!

–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –≤–∏–¥–µ–æ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ 3 –∫–æ–ø–∏–π
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏
‚Ä¢ –°–∂–∏–º–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (–¥–æ 50MB) –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ!

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
        """
        await update.message.reply_text(welcome_text)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VideoBot:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV, WMV, FLV)
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:
   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (1-3)
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏ (–¥–∞/–Ω–µ—Ç)
   ‚Ä¢ –°–∂–∞—Ç—å –≤–∏–¥–µ–æ (–¥–∞/–Ω–µ—Ç)
3. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
‚Ä¢ –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        await update.message.reply_text(help_text)
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–æ
        if user_id in self.processing_users:
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        video = update.message.video
        if video.file_size > 50 * 1024 * 1024:  # 50MB
            await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB!")
            return
        
        self.processing_users.add(user_id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            file = await context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            temp_dir = Path(f"temp_{user_id}")
            temp_dir.mkdir(exist_ok=True)
            
            input_path = temp_dir / f"input_{video.file_id}.mp4"
            await file.download_to_drive(input_path)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            keyboard = [
                [InlineKeyboardButton("üìä –ö–æ–ø–∏–∏: 1", callback_data="copies_1")],
                [InlineKeyboardButton("üìä –ö–æ–ø–∏–∏: 2", callback_data="copies_2")],
                [InlineKeyboardButton("üìä –ö–æ–ø–∏–∏: 3", callback_data="copies_3")],
                [InlineKeyboardButton("üñºÔ∏è –†–∞–º–∫–∏: –í–ö–õ", callback_data="frames_on")],
                [InlineKeyboardButton("üñºÔ∏è –†–∞–º–∫–∏: –í–´–ö–õ", callback_data="frames_off")],
                [InlineKeyboardButton("üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–ö–õ", callback_data="compression_on")],
                [InlineKeyboardButton("üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–´–ö–õ", callback_data="compression_off")],
                [InlineKeyboardButton("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"process_{video.file_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_msg.edit_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['video_path'] = str(input_path)
            context.user_data['temp_dir'] = str(temp_dir)
            context.user_data['copies'] = 1
            context.user_data['add_frames'] = False
            context.user_data['compression'] = False
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            self.processing_users.discard(user_id)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        if data.startswith("copies_"):
            copies = int(data.split("_")[1])
            context.user_data['copies'] = copies
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = self._create_keyboard(context.user_data)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
        elif data.startswith("frames_"):
            add_frames = data.endswith("_on")
            context.user_data['add_frames'] = add_frames
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = self._create_keyboard(context.user_data)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
        elif data.startswith("compression_"):
            compression = data.endswith("_on")
            context.user_data['compression'] = compression
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = self._create_keyboard(context.user_data)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            
        elif data.startswith("process_"):
            await self._process_video(query, context)
    
    def _create_keyboard(self, user_data):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        copies = user_data.get('copies', 1)
        add_frames = user_data.get('add_frames', False)
        compression = user_data.get('compression', False)
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
        copies_buttons = []
        for i in range(1, 4):
            text = f"üìä –ö–æ–ø–∏–∏: {i}"
            if i == copies:
                text += " ‚úÖ"
            copies_buttons.append(InlineKeyboardButton(text, callback_data=f"copies_{i}"))
        keyboard.append(copies_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–º–æ–∫
        frames_text = "üñºÔ∏è –†–∞–º–∫–∏: –í–ö–õ" if add_frames else "üñºÔ∏è –†–∞–º–∫–∏: –í–´–ö–õ"
        if add_frames:
            frames_text += " ‚úÖ"
        keyboard.append([InlineKeyboardButton(frames_text, callback_data="frames_on" if not add_frames else "frames_off")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è
        compression_text = "üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–ö–õ" if compression else "üóúÔ∏è –°–∂–∞—Ç–∏–µ: –í–´–ö–õ"
        if compression:
            compression_text += " ‚úÖ"
        keyboard.append([InlineKeyboardButton(compression_text, callback_data="compression_on" if not compression else "compression_off")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        keyboard.append([InlineKeyboardButton("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="process_go")])
        
        return keyboard
    
    async def _process_video(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        user_id = query.from_user.id
        
        try:
            await query.edit_message_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
            
            video_path = Path(context.user_data['video_path'])
            temp_dir = Path(context.user_data['temp_dir'])
            copies = context.user_data['copies']
            add_frames = context.user_data['add_frames']
            compression = context.user_data['compression']
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_dir = temp_dir / "results"
            result_dir.mkdir(exist_ok=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result_files = await self.processor.process_video(
                input_path=video_path,
                output_dir=result_dir,
                copies=copies,
                compression=compression,
                add_frames=add_frames
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            for i, file_path in enumerate(result_files):
                await query.message.reply_video(
                    video=open(file_path, 'rb'),
                    caption=f"üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ #{i+1}\n"
                           f"–ö–æ–ø–∏–π: {copies}\n"
                           f"–†–∞–º–∫–∏: {'–î–∞' if add_frames else '–ù–µ—Ç'}\n"
                           f"–°–∂–∞—Ç–∏–µ: {'–î–∞' if compression else '–ù–µ—Ç'}"
                )
            
            await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                shutil.rmtree(temp_dir, ignore_errors=True)
            except:
                pass
            
            self.processing_users.discard(user_id)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    bot = VideoBot()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help))
    application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video))
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
