import asyncio
import subprocess
from pathlib import Path
from typing import List
import os
import shutil
import random

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ffmpeg-python
try:
    import ffmpeg
    FFMPEG_AVAILABLE = True
    print("ffmpeg-python –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    FFMPEG_AVAILABLE = False
    print("ffmpeg-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class VideoProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    def __init__(self):
        self.supported_formats = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.temp_dir = Path("temp_processing")
        self.temp_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è FFmpeg
        temp_path = str(self.temp_dir.absolute())
        os.environ['TMPDIR'] = temp_path
        os.environ['TMP'] = temp_path
        os.environ['TEMP'] = temp_path
        os.environ['TMPDIR'] = temp_path  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Windows
        os.environ['TMPDIR'] = temp_path
        os.environ['TMP'] = temp_path
        os.environ['TEMP'] = temp_path
        
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TMPDIR={temp_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        # self._check_ffmpeg()
    
    def _check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            env = os.environ.copy()
            env['TMPDIR'] = str(self.temp_dir)
            env['TMP'] = str(self.temp_dir)
            env['TEMP'] = str(self.temp_dir)
            
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=10, env=env)
            if result.returncode == 0:
                print("‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            else:
                print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FFmpeg: {e}")
    
    async def process_video(
        self,
        input_path: Path,
        output_dir: Path,
        copies: int = 1,
        compression: bool = False,
        add_frames: bool = False
    ) -> List[Path]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        
        Args:
            input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            copies: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (1-3)
            compression: –í–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ
            add_frames: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ: {input_path}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–ø–∏–∏={copies}, —Å–∂–∞—Ç–∏–µ={compression}, —Ä–∞–º–∫–∏={add_frames}")
        print(f"FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω: {FFMPEG_AVAILABLE}")
        
        result_files = []
        
        for i in range(copies):
            output_filename = f"processed_copy_{i+1}_{input_path.stem}.mp4"
            output_path = output_dir / output_filename
            
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ø–∏—é {i+1}: {output_filename}")
            
            try:
                if add_frames:
                    print(f"–î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫–∏ –∫ –∫–æ–ø–∏–∏ {i+1}")
                    await self._add_frames_ffmpeg(input_path, output_path, i+1)
                else:
                    print(f"–ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ —Ä–∞–º–æ–∫ –∫–æ–ø–∏—é {i+1}")
                    await self._copy_video_ffmpeg(input_path, output_path)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if compression:
                    print(f"–°–∂–∏–º–∞–µ–º –∫–æ–ø–∏—é {i+1}")
                    compressed_path = output_dir / f"compressed_{output_filename}"
                    await self._compress_video_ffmpeg(output_path, compressed_path)
                    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–∂–∞—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π
                    output_path.unlink()
                    compressed_path.rename(output_path)
                
                result_files.append(output_path)
                print(f"–ö–æ–ø–∏—è {i+1} –≥–æ—Ç–æ–≤–∞: {output_path}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ø–∏–∏ {i+1}: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(input_path, output_path)
                result_files.append(output_path)
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ {len(result_files)} —Ñ–∞–π–ª–æ–≤")
        return result_files
    
    async def _copy_video_ffmpeg(self, input_path: Path, output_path: Path):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
        if not FFMPEG_AVAILABLE:
            shutil.copy2(input_path, output_path)
            return
            
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, self._copy_video_ffmpeg_sync, input_path, output_path)
    
    def _copy_video_ffmpeg_sync(self, input_path: Path, output_path: Path):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É FFmpeg –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            cmd = [
                'ffmpeg', '-y',
                '-i', str(input_path),
                '-c:v', 'libx264',
                '-preset', 'ultrafast',  # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                '-crf', '23',  # –ö–∞—á–µ—Å—Ç–≤–æ
                '-c:a', 'copy',  # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                str(output_path)
            ]
            
            print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {' '.join(cmd)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞—à–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            temp_path = str(self.temp_dir.absolute())
            env['TMPDIR'] = temp_path
            env['TMP'] = temp_path
            env['TEMP'] = temp_path
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300, env=env)
            
            if result.returncode == 0:
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {output_path}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:")
                print(f"   stdout: {result.stdout}")
                print(f"   stderr: {result.stderr}")
                raise Exception(f"FFmpeg copy error: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(input_path, output_path)
            print(f"üìÅ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ shutil: {output_path}")
    
    async def _add_frames_ffmpeg(self, input_path: Path, output_path: Path, copy_num: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–º–∫–∏ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
        if not FFMPEG_AVAILABLE:
            shutil.copy2(input_path, output_path)
            return
            
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, self._add_frames_ffmpeg_sync, input_path, output_path, copy_num)
    
    def _add_frames_ffmpeg_sync(self, input_path: Path, output_path: Path, copy_num: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–æ–∫"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–º–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange', 'pink', 'cyan', 'magenta', 'lime']
            border_color = random.choice(colors)
            
            print(f"–î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É —Ü–≤–µ—Ç–∞ {border_color} –¥–ª—è –∫–æ–ø–∏–∏ {copy_num}")
            print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
            print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É FFmpeg –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–∫–∏
                cmd = [
                    'ffmpeg', '-y',  # -y –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
                    '-i', str(input_path),
                    '-vf', f'pad=iw+60:ih+60:30:30:{border_color}',
                    '-c:v', 'libx264',
                    '-preset', 'ultrafast',  # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    '-crf', '23',  # –ö–∞—á–µ—Å—Ç–≤–æ
                    '-c:a', 'copy',  # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                    str(output_path)
                ]
                
                print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞—à–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env = os.environ.copy()
                temp_path = str(self.temp_dir.absolute())
                env['TMPDIR'] = temp_path
                env['TMP'] = temp_path
                env['TEMP'] = temp_path
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=60, env=env)
                
                if result.returncode == 0:
                    print(f"‚úÖ –†–∞–º–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {output_path}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg:")
                    print(f"   stdout: {result.stdout}")
                    print(f"   stderr: {result.stderr}")
                    raise Exception(f"FFmpeg error: {result.stderr}")
                    
            except Exception as pad_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–º–∫–∏: {pad_error}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ drawbox
                try:
                    cmd = [
                        'ffmpeg', '-y',
                        '-i', str(input_path),
                        '-vf', f'drawbox=x=0:y=0:w=iw:h=ih:color={border_color}:t=30',
                        '-c:v', 'libx264',
                        '-preset', 'ultrafast',  # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        '-crf', '23',  # –ö–∞—á–µ—Å—Ç–≤–æ
                        '-c:a', 'copy',  # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                        str(output_path)
                    ]
                    
                    print(f"–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                    
                    env = os.environ.copy()
                    temp_path = str(self.temp_dir.absolute())
                    env['TMPDIR'] = temp_path
                    env['TMP'] = temp_path
                    env['TEMP'] = temp_path
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=60, env=env)
                    
                    if result.returncode == 0:
                        print(f"‚úÖ –†–∞–º–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±): {output_path}")
                    else:
                        print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:")
                        print(f"   stdout: {result.stdout}")
                        print(f"   stderr: {result.stderr}")
                        raise Exception(f"Alternative FFmpeg error: {result.stderr}")
                        
                except Exception as alt_error:
                    print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {alt_error}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    shutil.copy2(input_path, output_path)
                    print(f"üìÅ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —Ä–∞–º–∫–∏: {output_path}")
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–º–∫–∏: {e}")
            print("üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            try:
                shutil.copy2(input_path, output_path)
                print(f"‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —Ä–∞–º–∫–∏: {output_path}")
            except Exception as copy_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {copy_error}")
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤
                try:
                    with open(input_path, 'rb') as src, open(output_path, 'wb') as dst:
                        dst.write(src.read())
                    print(f"‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–∞–π—Ç–∞–º–∏: {output_path}")
                except Exception as final_error:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {final_error}")
                    raise
    
    async def _compress_video_ffmpeg(self, input_path: Path, output_path: Path):
        """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
        if not FFMPEG_AVAILABLE:
            shutil.copy2(input_path, output_path)
            return
            
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, self._compress_video_ffmpeg_sync, input_path, output_path)
    
    def _compress_video_ffmpeg_sync(self, input_path: Path, output_path: Path):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É FFmpeg –¥–ª—è —Å–∂–∞—Ç–∏—è
            cmd = [
                'ffmpeg', '-y',
                '-i', str(input_path),
                '-c:v', 'libx264',
                '-crf', '28',  # –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (18-28, –≥–¥–µ 28 - –±–æ–ª—å—à–µ —Å–∂–∞—Ç–∏–µ)
                '-preset', 'ultrafast',  # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                '-c:a', 'copy',  # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                str(output_path)
            ]
            
            print(f"–í—ã–ø–æ–ª–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ: {' '.join(cmd)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞—à–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            temp_path = str(self.temp_dir.absolute())
            env['TMPDIR'] = temp_path
            env['TMP'] = temp_path
            env['TEMP'] = temp_path
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300, env=env)
            
            if result.returncode == 0:
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {output_path}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏:")
                print(f"   stdout: {result.stdout}")
                print(f"   stderr: {result.stderr}")
                raise Exception(f"FFmpeg compression error: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(input_path, output_path)
            print(f"üìÅ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —Å–∂–∞—Ç–∏—è: {output_path}")